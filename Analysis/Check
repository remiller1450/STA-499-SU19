library(R.matlab) # Reads matlab files
library(stringr) # String manipulation
library(readr) # Gets numbers outof complex strings
library(plotly)
library(dplyr)
library(readxl)
library(pROC)
library(ggplot2)
library(gridExtra)

# NOTE: should have the folder "MatFiles" downloaded and extracted to the location below
# Should have the files "disposition.xls" and "randomization.xlsx" in locations below

## Grab all of the .mat Files from directory
files <- list.files("H:\\V2VMAT\\MatFiles")
data <- read.csv("H:\\V2VMAT\\haptic_data.csv")
for (i in c(15,16,17,20,28,31,66,77,83,90,110)){
  data <- subset(data,Part_ID != i)
  
}


disp <- readxl::read_excel("H:\\V2VMAT\\disposition.xls")
disp$DaqName2 <- str_replace(disp$DaqName, ".daq", ".mat")
rand <- readxl::read_excel("H:\\V2VMAT\\randomization.xlsx")
rand$`Participant#`<- as.numeric(rand$`Participant#`)
df <- data.frame(Part_ID = numeric(), Alert_C = character(), Alert_L = character(), Safety = numeric())



start <- function(acceleration, wheel){
  acc_rate <- diff(acceleration)*60
  acc_point <- ifelse(is.na(which(abs(acc_rate) > 3)[1]), 1000, which(abs(acc_rate) > 3)[1])
  wheel_rate <- diff(wheel)*60
  wheel_point <- ifelse(is.na(which(abs(wheel_rate) > 0.3)[1]), 1000, which(abs(wheel_rate) > 0.3)[1])
  if (acc_point < wheel_point){
    ifelse(acc_rate[acc_point] > 0, return(c(acc_point, wheel_point, 2)), return (c(acc_point, wheel_point, 1)))
  }
  else if (acc_point >= wheel_point & wheel_point != 1000){
    ifelse(wheel_rate[wheel_point] > 0, return(c(wheel_point, acc_point, -2)), return (c(wheel_point, acc_point, -1)))
  }
  else{
    return (c(1000, 1000, 0))
  }
}

test <- data %>% group_by(Part_ID) %>% summarize(first = start(acceleration, wheel)[1], second = start(acceleration, wheel)[2], type = start(acceleration, wheel)[3])

val <- function(input, fun, var, time){
  return ((var[input == fun(input)][1] - var[1])/time[input == fun(input)][1])
}

calc1 <- function(acceleration, wheel, time, logstream, speed, heading){
  time_change <- time[match(TRUE, logstream == 2)]
  speed_Q <- speed[match(TRUE, logstream == 2)]
  fun <- start(acceleration, wheel)
  start <- ifelse(fun[1] != 1000, fun[1], time_change)
  alt <- fun[2]
  type <- fun[3]
  time <- time - time_change
  time_end <- 2.90 - time[start]
  
  incdf1 <- data.frame(acceleration = acceleration, wheel = wheel, time = time, logstream = logstream, speed = speed, heading = heading)
  incdf1 <- incdf1[start:nrow(incdf1),]
  incdf1 <- na.omit(incdf1)
  incdf1$time <- incdf1$time - incdf1$time[1]
  
  acc <- 0
  whl <- 0
  
  if(type == 1){
    acc <- val(incdf1$acceleration, min, incdf1$speed, incdf1$time)
    if(alt - start <= 20){
      ifelse(diff(incdf1$wheel)[alt-start] < 0,
             whl <- val(incdf1$wheel, min, incdf1$heading, incdf1$time),
             whl <- val(incdf1$wheel, max, incdf1$heading, incdf1$time))
    }
  }
  else if(type == 2){
    acc <- val(incdf1$acceleration, max, incdf1$speed, incdf1$time)
    if(alt - start <= 20){
      ifelse(diff(incdf1$wheel)[alt-start] < 0,
             whl <- val(incdf1$wheel, min, incdf1$heading, incdf1$time),
             whl <- val(incdf1$wheel, max, incdf1$heading, incdf1$time))
    }
  }
  else if(type == -2){
    whl <- val(incdf1$wheel, max, incdf1$heading, incdf1$time)
    if(alt - start <= 20){
      ifelse(diff(incdf1$acceleration)[alt-start] < 0,
             acc <- val(incdf1$acceleration, min, incdf1$speed, incdf1$time),
             acc <- val(incdf1$acceleration, max, incdf1$speed, incdf1$time))
    }
  }
  else if(type == -1){
    whl <- val(incdf1$wheel, min, incdf1$heading, incdf1$time)
    if(alt - start <= 20){
      ifelse(diff(incdf1$acceleration)[alt-start] < 0,
             acc <- val(incdf1$acceleration, min, incdf1$speed, incdf1$time),
             acc <- val(incdf1$acceleration, max, incdf1$speed, incdf1$time))
    }
  }
  
  if(acc < 0){
    time_stop <- -incdf1$speed[1]/acc 
  }
  else{
    time_stop <- 1000
  }
  
  if(whl == 0){
    if (time_end <= time_stop){
      Zp <- (time_end*incdf1$speed[1]- time_end*incdf1$speed[1] - acc/2*time_end^2)/incdf1$speed[1]
    } else{
      Zp <- (time_end*incdf1$speed[1]- time_stop*incdf1$speed[1] - acc/2*time_stop^2)/incdf1$speed[1]
    }
  }
  else{
    Posqy <- 0
    Posqx <- function(t, time_end, speed_Q){
      (time_end - t) *speed_Q
    }
    Pospy <- function(t, time_end, speed_P, wheel, acc){
      -time_end*speed_P+(speed_P*sin(wheel*t)/wheel+acc*(wheel*t*sin(wheel*t)+cos(wheel*t))/wheel^2)-acc/wheel^2
      
    }
    
    Pospx <- function(t, speed_P, wheel, acc){
      (-wheel*(acc*t + speed_P)*cos(t*wheel)+acc*(sin(t*wheel))+speed_P*wheel)/wheel^2
    }
    
    qx_px <- function(t, time_end, speed_Q, speed_P,wheel, acc){
      Posqx(t, time_end, speed_Q)-Pospx(t, speed_P, wheel, acc)
    }
    
    result <- uniroot(qx_px, time_end = time_end, speed_Q = speed_Q, speed_P = incdf1$speed[1], wheel = whl, acc = acc, interval = c(0,10))
    Zp <- Pospy(result$root,time_end,incdf1$speed[1],whl,acc)/incdf1$speed[1]
  }
  return(Zp)
}

inputs <- function(acceleration, wheel, time, logstream, speed, heading){
  time_change <- time[match(TRUE, logstream == 2)]
  speed_Q <- speed[match(TRUE, logstream == 2)]
  fun <- start(acceleration, wheel)
  start <- ifelse(fun[1] != 1000, fun[1], time_change)
  alt <- fun[2]
  type <- fun[3]
  time <- time - time_change
  time_end <- 2.90 - time[start]
  incdf1 <- data.frame(acceleration = acceleration, wheel = wheel, time = time, logstream = logstream, speed = speed, heading = heading)
  incdf1 <- incdf1[start:nrow(incdf1),]
  incdf1 <- na.omit(incdf1)
  incdf1$time <- incdf1$time - incdf1$time[1]
  acc <- 0
  whl <- 0
  
  if(type == 1){
    acc <- val(incdf1$acceleration, min, incdf1$speed, incdf1$time)
    if(alt - start <= 20){
      ifelse(diff(incdf1$wheel)[alt-start] < 0,
             whl <- val(incdf1$wheel, min, incdf1$heading, incdf1$time),
             whl <- val(incdf1$wheel, max, incdf1$heading, incdf1$time))
    }
  } else if(type == 2){
    acc <- val(incdf1$acceleration, max, incdf1$speed, incdf1$time)
    if(alt - start <= 20){
      ifelse(diff(incdf1$wheel)[alt-start] < 0,
             whl <- val(incdf1$wheel, min, incdf1$heading, incdf1$time),
             whl <- val(incdf1$wheel, max, incdf1$heading, incdf1$time))
    }
  } else if(type == -2){
    whl <- val(incdf1$wheel, max, incdf1$heading, incdf1$time)
    if(alt - start <= 20){
      ifelse(diff(incdf1$acceleration)[alt-start] < 0,
             acc <- val(incdf1$acceleration, min, incdf1$speed, incdf1$time),
             acc <- val(incdf1$acceleration, max, incdf1$speed, incdf1$time))
    }
  } else if(type == -1){
    whl <- val(incdf1$wheel, min, incdf1$heading, incdf1$time)
    if(alt - start <= 20){
      ifelse(diff(incdf1$acceleration)[alt-start] < 0,
             acc <- val(incdf1$acceleration, min, incdf1$speed, incdf1$time),
             acc <- val(incdf1$acceleration, max, incdf1$speed, incdf1$time))
    }
  }
  if(acc < 0){
    time_stop <- -incdf1$speed[1]/acc 
  } else{
    time_stop <- 1000
  }
  Posqy <- 0
  Posqx <- function(t, time_end, speed_Q){
    (time_end - t) *speed_Q
  }
  Pospy <- function(t, time_end, speed_P, wheel, acc){
    -time_end*speed_P+(speed_P*sin(wheel*t)/wheel+acc*(wheel*t*sin(wheel*t)+cos(wheel*t))/wheel^2)-acc/wheel^2
    
  }
  
  Pospx <- function(t, speed_P, wheel, acc){
    (-wheel*(acc*t + speed_P)*cos(t*wheel)+acc*(sin(t*wheel))+speed_P*wheel)/wheel^2
  }
  
  
  if(whl == 0){
    zp <- (incdf1$speed[1]*time_end -incdf1$speed[1]*incdf1$time - acc*incdf1$time*incdf1$time/2)/incdf1$speed[1]
    zq <- time_end - incdf1$time
    
    
    if (time_stop <= time_end){
      zp[which.min(abs(incdf1$time-time_stop))[1]:length(zp)] <- (incdf1$speed[1]*time_end -incdf1$speed[1]*time_stop - acc*time_stop*time_stop/2)/incdf1$speed[1]
    }
  } else{
    zp <-(Posqy - Pospy(incdf1$time,time_end,incdf1$speed[1],whl,acc))/incdf1$speed[1]
    zq <-(Pospx(incdf1$time, incdf1$speed[1], whl, acc) - Posqx(incdf1$time, time_end, speed_Q))/speed_Q
    if (which.min(abs(incdf1$time-time_stop))[1] <= length(zp)){
      zp[which.min(abs(incdf1$time-time_stop))[1]:length(zp)] <- (Posqy - Pospy(time_stop,time_end,incdf1$speed[1],whl,acc))/incdf1$speed[1]
      zq[which.min(abs(incdf1$time-time_stop))[1]:length(zq)] <- (Pospx(time_stop, incdf1$speed[1], whl, acc) - Posqx(incdf1$time[which.min(abs(incdf1$time-time_stop))[1]:length(zq)], time_end, speed_Q))/speed_Q
    }
  }
  x <- data.frame(zp, zq)
  t1 <- which.min(abs(floor(zp*100)))[1]
  t2 <- which.min(abs(floor(zq*100)))[1]
  return(x[t1:t2,])
}

calc2 <- function(dat){
  if (nrow(dat) == 1){
    return(sqrt(dat[1, 1]^2 + dat[1, 2]^2))
  }
  else{
    sum <- numeric(length(nrow(dat)-1))
    div <- numeric(length(nrow(dat)-1))
    for(i in 1:(nrow(dat)-1)){
      div[i] = sqrt((dat[i, 1]-dat[i+1, 1])^2+ (dat[i, 2]-dat[i+1, 2])^2)
      sum[i] = sqrt(dat[i, 1]^2 + dat[i, 2]^2)*sqrt((dat[i, 1]-dat[i+1, 1])^2+ (dat[i, 2]-dat[i+1, 2])^2)
    }
    val <- sum(sum)/ sum(div)
    return(val)
  }
}

haptic_dat <- data %>% group_by(Part_ID) %>% summarize(Zp = calc1(acceleration, wheel, time, logstream, speed, heading), dist = calc2(inputs(acceleration, wheel, time, logstream, speed, heading)), type = start(acceleration, wheel)[3], collide = max(collision))

for (i in 1:length(files)){
  pos <- which(disp$DaqName2 == files[i])
  ID <- parse_number(disp[pos, ]$DaqPath)
  if (str_sub(disp[pos, ]$DaqPath, -2, -1) == "MN" & ID <= 180){
    alert_char <- rand[which(rand$`Participant#` == ID),]$Characteristic
    alert_level <- rand[which(rand$`Participant#` == ID),]$AlertLevel
    de <- data.frame(Part_ID = ID, Alert_C = alert_char, Alert_L = alert_level)
    df <- rbind(df, de)
  }
}

df <- left_join(x = df, y = haptic_dat, by = "Part_ID")

df$INT <- "NA"
df$IPI <- "NA"
df$DIP <- "NA"

for(i in 1:length(df$Part_ID)){
  if (df$Alert_C[i] == "INT"){
    df$IPI[i] <- "0ms"
    df$DIP[i] <- "Left_only"
    if (df$Alert_L[i] == 1){
      df$INT[i] <- "30Hz"
    }
    else if (df$Alert_L[i] == 2){
      df$INT[i] <- "40Hz"
    }
    else if (df$Alert_L[i] == 3){
      df$INT[i] <- "50Hz"
    }
    else if (df$Alert_L[i] == 4){
      df$INT[i] <- "60Hz"
    }
    else if (df$Alert_L[i] == 5){
      df$INT[i] <- "70Hz"
    }
  }
  if (df$Alert_C[i] == "IPI"){
    df$INT[i] <- "50Hz"
    df$DIP[i] <- "Left_only"
    if (df$Alert_L[i] == 1){
      df$IPI[i] <- "0ms"
    }
    else if (df$Alert_L[i] == 2){
      df$IPI[i] <- "30ms"
    }
    else if (df$Alert_L[i] == 3){
      df$IPI[i] <- "60ms"
    }
    else if (df$Alert_L[i] == 4){
      df$IPI[i] <- "90ms"
    }
    else if (df$Alert_L[i] == 5){
      df$IPI[i] <- "120ms"
    }
  }
  if (df$Alert_C[i] == "DIP"){
    df$INT[i] <- "50Hz"
    df$IPI[i] <- "0ms"
    if (df$Alert_L[i] == 1){
      df$DIP[i] <- "Left_only"
    }
    else if (df$Alert_L[i] == 2){
      df$DIP[i] <- "Front_to_rear"
    }
    else if (df$Alert_L[i] == 3){
      df$DIP[i] <- "Right_to_left"
    }
    else if (df$Alert_L[i] == 4){
      df$DIP[i] <- "Left_to_right"
    }
    else if (df$Alert_L[i] == 5){
      df$DIP[i] <- "Whole_seat"
    }
  }
  if(df$Alert_L[i] == "B"){
    df$INT[i] <- "0Base"
    df$IPI[i] <- "0Base"
    df$DIP[i] <- "Base"
  }
  
}
df$INT <- parse_number(df$INT)
df$IPI <- parse_number(df$IPI)
df$Base <- "Alert"
for (i in 1:length(df$Part_ID)){
  if (df$DIP[i] == "Base"){
    df$Base[i] <- "Base"
  }
}
for (i in 1:length(df$Part_ID)){
  if (df$collide[i] == 0){
    df$collide[i] <- "No Collision"
  }
  else if (df$collide[i] == 1){
    df$collide[i] <- "Collision"
  }
}

for (i in c(15,16,17,20,28,31,66,77,83,90,110)){
  df <- subset(df,Part_ID != i)
  
}

p1 <- ggplot(df, aes(y = dist, x = factor(collide))) + geom_boxplot() + labs(y = "Expected Distance", x = "") + theme_classic()

n <- 92
rr <- roc(data = df, response = collide, predictor = dist)
p2 <- ggroc(rr) + geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), linetype = "dashed") + labs(y = "Sensitivity", x = "Specificity") + theme_classic()
p2 <- p2 + geom_point( aes(x = rr$specificities[n], y = rr$sensitivities[n])) +
  geom_text(label = paste("(", round(rr$specificities[n],2),  round(rr$sensitivities[n],2), ")"), aes(x = rr$specificities[n]-0.005, y = rr$sensitivities[n] + .045))
rr$thresholds[92]
grid.arrange(p1, p2, nrow = 1)

df1 <- filter(df, Alert_C == "INT" | Alert_L == "B")
p3 <- ggplot(df1, aes(x = factor(df1$INT), y = dist)) + 
  geom_boxplot() +
  stat_summary(fun.y = mean, geom = "point", color = "red", pch = 2)+ theme_classic()+ labs(y = "Expected Distance", x = "Intensity")
p4 <- ggplot(df1, aes(x = factor(df1$INT), y = collide)) +
  geom_jitter(width = 0.05, height = 0)+
  scale_y_reverse() +
  stat_summary(fun.y = mean, geom = "point", color = "red", pch = 2)+ theme_classic()+ labs(y = "Collision", x = "Intensity")
grid.arrange(p3, p4, nrow = 1)

df2 <- filter(df,Alert_L != "B")
a <- glm(data = df2, dist~INT+IPI+DIP)
b <- glm(data = df2, collide~INT+IPI+DIP)
xtable(anova(b, test = "LRT"), caption = "Collision as Response")
xtable(anova(a, test = "LRT"), caption="Expected Distance as Response")


d <- data[data$Part_ID == 65,]
ggplot()+geom_point(data=d, aes(x = time, y = acceleration), colour=alpha('red', 0.5))+geom_point(data=d, aes(x = time, y= wheel*10),colour=alpha('blue', 0.5))+scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Wheel Angle"))+
  geom_vline(xintercept = d$time[1])+geom_vline(xintercept = d$time[1]+3.96)+geom_point(aes(x =d$time[start(d$acceleration,d$wheel)[1]],y=d$wheel[start(d$acceleration,d$wheel)[1]]*10),shape=23,fill="blue",size=3)+geom_point(aes(x =d$time[start(d$acceleration,d$wheel)[2]],y=d$acceleration[start(d$acceleration,d$wheel)[2]]),shape=23,fill="red",size=3)+
  geom_text(label = paste("Alert\nRing"),aes(x = d$time[1]+0.17, y = 2))+geom_text(label = paste("First Reaction \n of Wheel Angle"),aes(x = d$time[start(d$acceleration,d$wheel)[1]]-0.45, y = 0.6))+
  geom_text(label = paste("First Reaction \n of Acceleration"),aes(x = d$time[start(d$acceleration,d$wheel)[1]]+0.5, y = -0.3))+geom_text(label = paste("Predicted\nCollision"),aes(x = d$time[1]+4.3, y = 2.5))+labs(x="Time",y="Acceleration")+theme_classic()
